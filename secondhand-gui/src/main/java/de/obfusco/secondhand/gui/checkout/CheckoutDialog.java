package de.obfusco.secondhand.gui.checkout;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import de.obfusco.secondhand.storage.model.Item;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.NumberFormat;
import java.util.List;
import java.util.*;

public class CheckoutDialog extends JDialog {
    private JPanel contentPane;
    private JButton checkOutButton;
    private JTable itemTable;
    private JTextField itemCodeField;

    private static NumberFormat CURRENCY = NumberFormat.getCurrencyInstance(Locale.GERMANY);
    private Map<String, Item> itemCodeMap;
    private List<Item> items;

    private List<Item> scannedItems = new ArrayList<>();

    public CheckoutDialog(List<Item> items) {
        this.items = items;
        itemCodeMap = new HashMap<>();
        items.forEach(i -> this.itemCodeMap.put(i.code, i));
        setContentPane(contentPane);
        setModal(true);

        checkOutButton.addActionListener(e -> onClose());

        // call onClose() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onClose();
            }
        });

        itemCodeField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent keyEvent) {
                if (keyEvent.getKeyCode() == KeyEvent.VK_ENTER) {
                    onScan();
                }
            }
        });

        DefaultTableModel itemTableModel = (DefaultTableModel) itemTable.getModel();
        itemTableModel.setRowCount(0);
        itemTableModel.setColumnCount(0);
        itemTableModel.addColumn("Nummber");
        itemTableModel.addColumn("Kategorie");
        itemTableModel.addColumn("Beschreibung");
        itemTableModel.addColumn("Preis");
        itemTableModel.addColumn("ausgecheckt");

        itemTable.setDefaultRenderer(Object.class, new TableCellRender());

        for (Item item : items) {
            itemTableModel.addRow(new Object[]{
                    item.number,
                    (item.category != null) ? item.category.name : "",
                    item.description,
                    CURRENCY.format(item.price),
                    item.wasCheckedOut() ? "ja" : "nein"
            });
        }
        itemCodeField.requestFocus();
        pack();
    }

    public List<Item> getScannedItems() {
        return scannedItems;
    }

    private void onClose() {
        dispose();
    }

    private void onScan() {
        String itemCode = itemCodeField.getText();
        Item item = itemCodeMap.get(itemCode);
        if (item == null) {
            JOptionPane.showMessageDialog(this, "Der Artikel zu diesem Artikelcode ist nicht in der Liste.",
                    "Unbekannter Code", JOptionPane.ERROR_MESSAGE);
            itemCodeField.requestFocus();
            return;
        }
        int index = items.indexOf(item);
        itemTable.setRowSelectionInterval(index, index);
        Rectangle rect = itemTable.getCellRect(index, 0, true);
        itemTable.scrollRectToVisible(rect);

        if (item.wasCheckedOut()) {
            JOptionPane.showMessageDialog(this, "Der Artikel ist bereits ausgecheckt.",
                    "Bereits ausgecheckt", JOptionPane.WARNING_MESSAGE);
            itemCodeField.requestFocus();
            return;
        }

        if (scannedItems.contains(item)) {
            JOptionPane.showMessageDialog(this, "Der Artikel ist bereits eingescannt.",
                    "Bereits eingescannt", JOptionPane.WARNING_MESSAGE);
            itemCodeField.requestFocus();
            return;
        }

        scannedItems.add(item);
        DefaultTableModel itemTableModel = (DefaultTableModel) itemTable.getModel();
        itemTableModel.setValueAt("GESCANNT", index, 4);

        checkOutButton.setText(String.format("%d Artikel auschecken", scannedItems.size()));

        itemCodeField.setText("");
        itemCodeField.requestFocus();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(4, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        checkOutButton = new JButton();
        checkOutButton.setText("Schließen");
        panel1.add(checkOutButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        contentPane.add(scrollPane1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(500, 400), null, 0, false));
        scrollPane1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Artikel"));
        itemTable = new JTable();
        scrollPane1.setViewportView(itemTable);
        itemCodeField = new JTextField();
        itemCodeField.setHorizontalAlignment(0);
        contentPane.add(itemCodeField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Hier sind alle relevanten Artikel der Reservierung. Bitte die Artikel einscannen und abschließend auschecken.");
        contentPane.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private static class TableCellRender extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean focus, int row, int column) {
            Component component = super.getTableCellRendererComponent(table, value, selected, focus, row, column);
            String status = table.getValueAt(row, 4).toString();
            component.setBackground(getBackgroundColor(status));
            component.setFont(component.getFont().deriveFont(selected ? Font.BOLD : Font.PLAIN));
            return component;
        }

        private Color getBackgroundColor(String status) {
            switch (status) {
                case "GESCANNT":
                    return Color.YELLOW;
                case "ja":
                    return Color.GREEN;
                default:
                    return Color.WHITE;
            }
        }
    }
}
